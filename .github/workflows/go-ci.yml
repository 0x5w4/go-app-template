name: Go CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ] 
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1' 
          cache: true
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v2.4.0
          only-new-issues: true

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          cache: true
      - name: Run Tests with Race Detector & Coverage
        run: go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} 
          files: ./coverage.out
          fail_ci_if_error: true

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, windows, darwin] 
        goarch: [amd64, arm64]         
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          cache: true
      - name: Build
        run: |
          go build -v -ldflags="-s -w" -o ./build/myapp-${{ matrix.goos }}-${{ matrix.goarch }} .
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./build/myapp-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write 
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            ./artifacts/**/*